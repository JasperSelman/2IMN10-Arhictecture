Saas-mode
1. What building blocks do you see? What do they represent? 
Are they conceptual or physical?
The building blocks we see are the Firewalls (conceptual). The purpose of these firewalls are obvious security reasons,
such that the site is protected from malicious attacks. We also see load balancers and filtering. These are for work distribution and are also conceptual.
The other componenets are all physical, namely the servers (application and database), databases and NASses. These are for storing and sharing the information on the site.

2. Same questions as 1, but now for the connectors?
You see the red lines connecting components within a site to each other. 
This represent how components in a site are linked to each other and with which components they can communicate.
You also see the green arrows, these connectors show how the main site communicates with the secondary site(s).
All these connectors are conceptual.

3. To which views (1..*) does the model belong?
	Motivate why, and identify corresponding stakeholders and their concerns.
We see a clear Design view with regards to the communication. You can clearly see which components should interact with other components.
You can also clearly see the Deployment view. You can clearly see all the components in the view and it gives an overview of the services. 	

4. Which of the following EFRs are addressed (Y + motivation | N)?
	Performance/Scalability, availability/reliability, security, maintainability?
Security: Yes, the use of firewalls and synchronous replications define the security.
Performance/Scalability: Yes, the use of the filtering and clustering give notion of the performance of the model.
Also the scalable parts are shown in groups from 1, 2 to N.
Availability/Reliability: No
Maintainability: No
Operability: Flow through the network is shown. 

5. Is there a concept of distribution (Y + motivation | N)?
Yes, You can clearly see the flow throughout the system. You see load balancers, applications, 
filters, Clustered Databases, Severs and NASses and how these are linked to each other. 

6.  Comment on the clarity/semantics of the diagram
You can clearly see what all the components in the sites are and how they are connected. 
Different components have there own coloring and smaller parts of the model, belonging to each other are structured in a group (dashed lines).
Different ways of communication are shown with different arrows. 
Not really clear what the model does precisely and what users/systems are using it.


EEtimes
1. What building blocks do you see? What do they represent? 
Are they conceptual or physical?

2. Same questions as 1, but now for the connectors?

3. To which views (1..*) does the model belong?
	Motivate why, and identify corresponding stakeholders and their concerns.
	
4. Which of the following EFRs are addressed (Y + motivation | N)?
	Performance/Scalability, availability/reliability, security, maintainability?
Security: 
Performance/Scalability: 
Availability/Reliability: 
Maintainability:
Operability:

5. Is there a concept of distribution (Y + motivation | N)?

6.  Comment on the clarity/semantics of the diagram


LinkedIn
1. What building blocks do you see? What do they represent? 
Are they conceptual or physical?
The blocks in this model are the applications, the services, the "cloud", and all the databases and servers.
The databases and servers are all physical and of course for storage of all the LinkedIn data. 
The applications, services and cloud are all conceptual. The applications represent the profils of different users.
The services represent what is used on LinkedIn, reading the news, communicate with other users, sharing something in a group, etc.
The cloud is where all these web apps are used.

2. Same questions as 1, but now for the connectors?
There is only one sort connector in this case, namely an arrow. Sometimes the arrow litterly states what happens between the components (for example profile updates).
Other times it is less obvious and you only know to components are connected and communicate. 
All the connectors are conceptual.

3. To which views (1..*) does the model belong?
	Motivate why, and identify corresponding stakeholders and their concerns.
We see a clear Design view with regards to the communication. You can clearly see which components should interact with other components and if it should be a read/write action or something else.
You can also clearly see the Deployment view. You can clearly see all the components in the view and it gives an overview of the services. 	
You can also see implementation things in the building blocks and connectors, so you also see the implementation view.

4. Which of the following EFRs are addressed (Y + motivation | N)?
	Performance/Scalability, availability/reliability, security, maintainability?
Security: No
Performance/Scalability: Yes, you see a stash of databases, and that every service has its own database. It is shown that this is extendible by the ... etc.
Availability/Reliability: No
Maintainability: Yes, Since every component has its own database, you can easily change some of the services or add/remove one. 

5. Is there a concept of distribution (Y + motivation | N)?
Yes, you can clearly see the distribution between services and databases and which application uses which service.

6.  Comment on the clarity/semantics of the diagram
You can clearly see all the components in the sites and how they are connected. 
Different components have there own coloring and smaller parts of the model.
Communication is clearly shown with arrows, sometimes the arrows also note what the communication is.
Not really clear where the architecture starts (I guess in the web apps).
But over all very structured and easy readible and understandible.

Vending Machine
1. What building blocks do you see? What do they represent? 
Are they conceptual or physical?
The states, substates and superstates. They are all conceptual and model in which state the vending machine is after an event has occured.

2. Same questions as 1, but now for the connectors?
The arrows represented by the events. These are all conceptual. They model an event which would happen in real life.

3. To which views (1..*) does the model belong?
	Motivate why, and identify corresponding stakeholders and their concerns.
Process view: system integrators, testers can see how the various parts interact.
Developers see what the machine has to do when something happens. They also see what they have to implement to see how the state changes.
Development view: the statechart is used to create the model by developpers.

4. Which of the following EFRs are addressed (Y + motivation | N)?
	Performance/Scalability, availability/reliability, security, maintainability?
Security: No
Performance/Scalability: No
Availability/Reliability: Yes, there are error methods when an error occurs.
Maintainability: Yes, the chart is very clear and easy to maintain. It is both useful for implementation and modification.

5. Is there a concept of distribution (Y + motivation | N)?
No.

6.  Comment on the clarity/semantics of the diagram
It is a very clear diagram. In development view it is clear in which states the machine can be and how these states can be reachted. 
It is however free for the programmer how this is implemented. It is also very cleaer wheter something is a state or an action. These are the only two possibilities in the chart.
Furtermore are the substates very useful to see which components communicate with each other.